# typed: false
# frozen_string_literal: true

require 'rails_helper'
require_relative '../mocks/dummy_task'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/tasks', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Task. As you add validations to Task, be sure to
  # adjust the attributes here as well.

  before(:all) do
    @factory = TaskHandlers::HandlerFactory.instance
    @handler = @factory.get(DummyTask::TASK_REGISTRY_NAME)
    task_request = TaskRequest.new(name: DummyTask::TASK_REGISTRY_NAME, context: { dummy: true }, initiator: 'pete@test', reason: 'setup test', source_system: 'test')
    @task = @handler.initialize_task!(task_request)
  end

  let(:valid_attributes) do
    { name: DummyTask::TASK_REGISTRY_NAME, context: { dummy: true }, initiator: 'pete@test', reason: 'basic test', source_system: 'test' }
  end

  let(:invalid_attributes) do
    # missing context
    { name: 'unknown-task' }
  end

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # TasksController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) do
    { 'content-type': 'application/json' }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      get tasks_url, headers: valid_headers, as: :json
      expect(response).to be_successful
      json_response = JSON.parse(response.body).deep_symbolize_keys
      expect(json_response[:tasks].pluck(:name)).to include(DummyTask::TASK_REGISTRY_NAME)
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      get task_url(@task), as: :json
      expect(response).to be_successful
      json_response = JSON.parse(response.body).deep_symbolize_keys
      expect(json_response[:task][:task_id]).to eq(@task.task_id)
      expect(json_response[:task][:workflow_steps]).not_to be_nil
      expect(json_response[:task][:workflow_steps].length).to eq(4)
      expect(json_response[:task][:workflow_steps].pluck(:status)).to eq(%w[pending pending pending pending])
    end
    it 'renders a successful response for a completed task' do
      @handler.handle(@task)
      get task_url(@task), as: :json
      expect(response).to be_successful
      json_response = JSON.parse(response.body).deep_symbolize_keys
      expect(json_response[:task][:task_id]).to eq(@task.task_id)
      expect(json_response[:task][:task_annotations]).not_to be_nil
      expect(json_response[:task][:task_annotations].length).to eq(4)
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Task' do
        expect do
          post tasks_url,
               params: { task: valid_attributes.merge({ reason: 'post create test' }) }, headers: valid_headers, as: :json
        end.to change(Task, :count).by(1)
      end

      it 'renders a JSON response with the new task' do
        post tasks_url, params: { task: valid_attributes.merge({ reason: 'post create render test' }) }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Task' do
        expect do
          post tasks_url,
               params: { task: invalid_attributes }, as: :json
        end.to change(Task, :count).by(0)
      end

      it 'renders a JSON response with errors for the new task' do
        post tasks_url, params: { task: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        { reason: 'patch test', tags: %w[some tags] }
      end

      it 'updates the requested task' do
        patch task_url(@task), params: { task: new_attributes }, headers: valid_headers, as: :json
        @task.reload
        expect(@task.reason).to eq('patch test')
      end

      it 'renders a JSON response with the task' do
        patch task_url(@task), params: { task: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested task' do
      handler = @factory.get(valid_attributes[:name])
      task = handler.initialize_task!(TaskRequest.new(valid_attributes.merge({ reason: 'delete test' })))
      delete task_url(task), headers: valid_headers, as: :json
      task.reload
      expect(task.status).to eq(Constants::TaskStatuses::CANCELLED)
    end
  end
end
