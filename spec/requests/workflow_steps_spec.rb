# typed: false
# frozen_string_literal: true

require 'rails_helper'
require_relative '../mocks/dummy_task'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/tasks/:task_id/workflow_steps', type: :request do
  before(:all) do
    @factory = TaskHandlers::HandlerFactory.instance
    handler = @factory.get(DummyTask::TASK_REGISTRY_NAME)
    task_request = TaskRequest.new(name: DummyTask::TASK_REGISTRY_NAME, context: { dummy: true }, initiator: 'pete@test', reason: 'setup workflow step test', source_system: 'test')
    @task = handler.initialize_task!(task_request)
  end
  # This should return the minimal set of attributes required to create a valid
  # WorkflowStep. As you add validations to WorkflowStep, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    { retry_limit: 8 }
  end

  let(:invalid_attributes) do
    { task_id: 1 }
  end

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # WorkflowStepsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) do
    { 'content-type': 'application/json' }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      get task_workflow_steps_url(@task), headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      workflow_step = @task.workflow_steps.first
      get task_workflow_step_url(@task, workflow_step), as: :json
      expect(response).to be_successful
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        { retry_limit: 8 }
      end

      it 'updates the requested workflow_step' do
        workflow_step = @task.workflow_steps.last
        patch task_workflow_step_url(@task, workflow_step),
              params: { workflow_step: new_attributes }, headers: valid_headers, as: :json
        workflow_step.reload
        expect(workflow_step.retry_limit).to eq(8)
      end

      it 'renders a JSON response with the workflow_step' do
        workflow_step = @task.workflow_steps.first
        patch task_workflow_step_url(@task, workflow_step),
              params: { workflow_step: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested workflow_step' do
      workflow_step = @task.workflow_steps.first
      delete task_workflow_step_url(@task, workflow_step), headers: valid_headers, as: :json
      workflow_step.reload
      expect(workflow_step.status).to eq('cancelled')
    end
  end
end
